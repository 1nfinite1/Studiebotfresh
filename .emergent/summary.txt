<analysis>
Studiebot is een Next.js 14 applicatie met server-only API routes (app/api/llm/**) en een MongoDB-backend voor studiemateriaal. Het project is opnieuw opgestart om de prompts minimalistisch te houden en ChatGPT’s eigen sterkte (leren en overhoren) optimaal te benutten. FastAPI en overbodige features uit eerdere iteraties zijn niet langer relevant.
De huidige focus: stabiele JSON-output, MongoDB-integratie, en het terugbrengen van de klassieke Oefentoets-flow (5 of 10 vragen in één keer, geen hulp, toetsrapport).
</analysis>
<product_requirements>
Core learning modes: Learn, Quiz, Exam (Oefentoets).

Always Dutch for student text, JSON keys in English.

Minimal prompts; adaptiviteit en Bloom-taxonomie in code (niet in de prompt).

MongoDB integration: gebruik van summary en glossary uit studiemateriaal. Fallback bij missende data.

Guardrails: unsafe/injection → vaste lijn: “Dat hoort niet bij de les. Laten we verdergaan.”

Oefentoets:

5 of 10 vragen in één keer genereren.

Geen hints/defs.

Student maakt de toets zonder hulp.

Rapport met score, grade, 3 focuspunten, per-item uitleg, en een chat_prefill waarmee Overhoren start op zwakke punten.
New features include:
1.  **Glossary**: Extract terms/definitions (backend ), frontend highlighting with click-to-define popovers.
2.  **Hint Button**: Display a ? button on assistant question messages to reveal hints.
3.  **Emoji Modes**: Frontend toggle (NONE/SOMETIMES/MANY) persisting mode, passing  header to backend.
4.  **LLM on Vercel via Server-only Next.js Routes**: Implement LLM functionality directly within  using server-only Next.js API routes () and an adapter (). Secrets must remain server-side. Scanner rules were updated to enforce this.
5.  **Finalize LLM Behavior**: Implement Learn, Quiz, and Practice Exam modes with Bloom taxonomy (remember, understand, apply), adaptive learning, and strict guardrails (moderation, relevance, prompt injection). All student-visible text must be in Dutch, JSON keys in English. Implement structured exam reports.
6.  **MongoDB Hookup**: Re-enable MongoDB integration for study materials, allowing LLM routes to use material summaries and glossaries for context. Includes a health check endpoint and graceful fallback if materials are missing.
</product_requirements>
<key_technical_concepts>
Next.js 14 server-only API routes voor LLM interactie.

Minimal prompts, contract enforcement en adaptiviteit (Bloom/difficulty) in server logic.

MongoDB als bron voor studiemateriaal (Node runtime).

Guardrails: moderatie en injection-detectie, met vaste fallback-output.

Always JSON: responses bevatten altijd { ok:true/false } en optioneel error.

Exam flow: batch-generatie + grading in één keer, rapport met Overhoren-koppeling.
</key_technical_concepts>
<code_architecture>
The application has a monorepo structure with a Next.js frontend () and a FastAPI backend ().



-   ****: Renamed from  to fix circular import, defines FastAPI .
-   ****: New entry point to correctly start FastAPI app via  for supervisor.
-   ****: Main UI component, extensively modified to integrate , , , , and updated LLM client calls.
-   ****: CI script, updated to allow LLM SDK imports only in  and  paths, and checks for .
-   ****: Placeholder file to ensure the empty  directory is tracked by Git for Vercel builds.
-   ** routes**: New Next.js server-only API routes (e.g., , , , , ) handling LLM calls, ensuring POST methods,  runtime, and proper headers/JSON responses, including detailed error handling.
-   ****: New server-only adapter for OpenAI LLM interactions, implementing moderation, relevance, prompt injection guardrails, Bloom taxonomy logic, and adaptive learning, with extensive error handling.
-   ****: New client-side utility for the UI to call the Next.js API routes securely.
-   ****: LLM provider factory, updated to return either  or the  based on .
-   ****: New components (, , ) for glossary highlighting and click-to-define popovers.
-   ****: New component for displaying contextual hints.
-   ** & **: New components for managing and toggling emoji display modes.
-   ****: New singleton MongoDB client with enhanced connection error handling.
-   ****: New service for fetching study materials from MongoDB, including graceful error handling.
-   ** & **: New diagnostic API routes for database health and materials access.
</code_architecture>
<pending_tasks>
Oplossen van de “Unexpected end of JSON input” error door te garanderen dat alle routes altijd geldige JSON terugsturen.

Controleren dat MongoDB-queries werken in Preview en gebruikt worden in LLM context.

Exam (Oefentoets) terugbrengen naar oude format (batch-generatie, rapport, Overhoren-CTA).
</pending_tasks>
<current_work>
The AI engineer is currently addressing a critical bug reported by the user: Failed to execute json on Response: Unexpected end of JSON input in the preview build (branch ). This error indicates that an LLM API route is returning an empty or non-JSON response when JSON is expected, likely due to unhandled exceptions.

- Minimal prompts zijn geïmplementeerd (NL output, Engels keys).

Guardrails werken, relevance is versoepeld.

MongoDB is verbonden maar routes geven soms nog lege/non-JSON responses.

Team werkt nu aan debuggen van foutpaden om altijd JSON terug te sturen, inclusief duidelijke foutmeldingen en ok:false.
</current_work>
<optional_next_step>
Na stabiliteit en Mongo-integratie:

Volledige implementatie van adaptiviteit (Bloom’s Taxonomy & Active Recall) in Learn/Quiz.

Uitbreiden van Exam (Oefentoets) grading met duidelijke rapportage en automatische Overhoren-samenvatting.

Op langere termijn: uitbreiding Glossary-highlighting en extra UI-features (optioneel).
</optional_next_step>
